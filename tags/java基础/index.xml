<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java基础 - Tag - Z</title>
        <link>http://lei-zz.github.io/tags/java%E5%9F%BA%E7%A1%80/</link>
        <description>Java基础 - Tag - Z</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>lei.zz0309@gmail.com (lei.zz)</managingEditor>
            <webMaster>lei.zz0309@gmail.com (lei.zz)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 13 Jul 2020 10:30:00 &#43;0000</lastBuildDate><atom:link href="http://lei-zz.github.io/tags/java%E5%9F%BA%E7%A1%80/" rel="self" type="application/rss+xml" /><item>
    <title>Java基础-反射机制</title>
    <link>http://lei-zz.github.io/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</link>
    <pubDate>Mon, 13 Jul 2020 10:30:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://lei-zz.github.io/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</guid>
    <description><![CDATA[反射机制 思考 创建一个对象，有哪几种方式?
1、使用new关键字：这是我们最常见的也是最简单的创建对象的方式
2、使用Clone的方法：无论何时我们调用一个对象的clone方法，JVM就会创建一个新的对象，将前面的对象的内容全部拷贝进去
3、使用反序列化：当我们序列化和反序列化一个对象，JVM会给我们创建一个单独的对象
定义 JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。
通俗的讲，反射就是把Java类中的各个部分，映射成一个个的Java对象，拿到这些对象后可以做一些事情。
例如，一个类有：成员变量，方法，构造方法，等信息，利用反射技术咱们可以把这些组成部分映射成一个个对象。
反射机制的相关类 与Java反射相关的类如下：
   类名 用途     Class类 代表类的实体，在运行的Java应用程序中表示类和接口   Field类 代表类的成员变量（成员变量也称为类的属性）   Method类 代表类的方法   Constructor类 代表类的构造方法    Class类 Class代表类的实体，在运行的Java应用程序中表示类和接口。在这个类中提供了很多有用的方法，这里对他们简单的分类介绍。
 获得类相关的方法     方法 用途     asSubclass(Class clazz) 把传递的类的对象转换成代表其子类的对象   Cast 把对象转换成代表类或是接口的对象   getClassLoader() 获得类的加载器   getClasses() 返回一个数组，数组中包含该类中所有公共类和接口类的对象   getDeclaredClasses() 返回一个数组，数组中包含该类中所有类和接口类的对象   forName(String className) 根据类名返回类的对象   getName() 获得类的完整路径名字   newInstance() 创建类的实例   getPackage() 获得类的包   getSimpleName() 获得类的名字   getSuperclass() 获得当前类继承的父类的名字   getInterfaces() 获得当前类实现的类或是接口     获得类中属性相关的方法     方法 用途     getField(String name) 获得某个公有的属性对象   getFields() 获得所有公有的属性对象   getDeclaredField(String name) 获得某个属性对象   getDeclaredFields() 获得所有属性对象     获得类中注解相关的方法     方法 用途     getAnnotation(Class annotationClass) 返回该类中与参数类型匹配的公有注解对象   getAnnotations() 返回该类所有的公有注解对象   getDeclaredAnnotation(Class annotationClass) 返回该类中与参数类型匹配的所有注解对象   getDeclaredAnnotations() 返回该类所有的注解对象     获得类中构造器相关的方法     方法 用途     getConstructor(Class&hellip;&lt;?]]></description>
</item><item>
    <title>Java基础概念</title>
    <link>http://lei-zz.github.io/java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
    <pubDate>Fri, 10 Jul 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://lei-zz.github.io/java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid>
    <description><![CDATA[Java基础-常见概念 范型 定义  把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型  设计原则   只要在编译时期没有出现警告，那么运行时期就不会出现ClassCastException异常
  参数化类型
 把类型当作是参数一样传递 &lt;数据类型&gt; 只能是引用类型    为什么需要   早期Java是使用Object来代表任意类型的，但是向下转型有强转的问题，这样程序就不太安全
  带来的好处
 代码更加简洁【不用强制转换】 程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】 可读性和稳定性【在编写集合的时候，就限定了类型】    类型擦除  将范型Java代码转化为普通代卖，在编译器编译过程中 将所有泛型参数使用其最左边界（最顶级父类）类型替换。 移除所有的类型参数 带来的问题   重载
 编译不通过    catch
 匹配多种类型    静态变量
 泛型类所有实例关联到同一字节码，静态变量共享     参考：https://segmentfault.com/a/1190000014120746  equals 和 == 使用   基本类型]]></description>
</item></channel>
</rss>
