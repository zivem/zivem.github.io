<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>JVM - Tag - Z</title>
        <link>http://lei-zz.github.io/tags/jvm/</link>
        <description>JVM - Tag - Z</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>lei.zz0309@gmail.com (lei.zz)</managingEditor>
            <webMaster>lei.zz0309@gmail.com (lei.zz)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 12 Feb 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://lei-zz.github.io/tags/jvm/" rel="self" type="application/rss+xml" /><item>
    <title>JVM基础</title>
    <link>http://lei-zz.github.io/jvm/</link>
    <pubDate>Fri, 12 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://lei-zz.github.io/jvm/</guid>
    <description><![CDATA[JVM基础 如何避免OutOfMemory hotspot 为了避免由新生代对象晋升道老年代，导致老年代空间不足的情况
在进行Minor GC时，判断之前晋升平均大小，大于老年代剩余空间，直接触发Full GC
例如：第一次触发MinorGc，有6MB对象晋升，再次MinorGC，老年代剩余空间小于6MB，则直接Full GC.
新生代
采用PSGC，在Minor GC，检查老年代剩余空间，小于6MB，触发对老年代回收。
除此之外，使用RMI进行RPC管理Sun JDK，默认情况下会一小时执行一次Full GC
可通过 java-Dsun.rmi.dgc.client.gcInterval=3600000设置间隔时间
-XX:+DisableExplicitGC来禁止RMI调用System.gc
Java虚拟机是什么？Java为什么被称作是“平台无关的编程语言”？ Java虚拟机是一个可以执行Java字节码的虚拟机进程。
Java源文件被编译成能被Java虚拟机执行的字节码文件。
Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。
Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特
性。
对象分配规则   对象优先分配在Eden区，没有足够空间，则执行一次Minor GC
  大对象直接进入老年代，（大对象指需要大量连续内存空间的对象），这样避免Eden区和俩个Survivor区之间发生大量的内存拷贝（新生代采用的复制算法进行内存回收）
  长期存活对象进入Surivivor区，经历两次Minor GC 就会进入老年代
  动态判断对象年龄，若Survivor中相同年龄的所有对象，大小综合大于Survivor空间一般，年龄大于或等于该年龄的对象可以直接进入老年代
  空间分配担保。Minor GC，JVM计算Survivor区晋升老年代的对象平均大小，大于老年代剩余空间大小，进行Full GC.
小于时，HandlePromotionFailre = true ，只进行Monitor GC，false则进行Full GC。
  JVM加载class原理机制 jvm中类的装在由类加载器classLoader和其子类实现
类的加载过程： 加载、连接（验证、准备和解析）和初始化。
  加载
类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。
  连接
加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。
  初始化
最后JVM对类进行初始化，包括：
 1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类； 2)如果类中存在初始化语句，就依次执行这些初始化语句。    类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.]]></description>
</item></channel>
</rss>
