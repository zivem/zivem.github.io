<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Tomcat - Tag - Z</title>
        <link>http://lei-zz.github.io/tags/tomcat/</link>
        <description>Tomcat - Tag - Z</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>lei.zz0309@gmail.com (lei.zz)</managingEditor>
            <webMaster>lei.zz0309@gmail.com (lei.zz)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 14 Jul 2020 22:40:00 &#43;0000</lastBuildDate><atom:link href="http://lei-zz.github.io/tags/tomcat/" rel="self" type="application/rss+xml" /><item>
    <title>Tomcat详解</title>
    <link>http://lei-zz.github.io/tomcat/</link>
    <pubDate>Tue, 14 Jul 2020 22:40:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://lei-zz.github.io/tomcat/</guid>
    <description><![CDATA[Tomcat详解 目录结构 bin：tomocat启动文件 conf  1.logging.properties 日志配置； 2.server.xml服务器端口等配置； 3.tomcat-users.xml tomcat用户角色、权限配置； 4.web.xml应用全局默认配置，若服务中进行了配置，则会覆盖  lib：基础jar包 temp ：临时文件 webapps ：发布项目的目录，管理界面 work：JSP 解析成Java类，中间会产生过程文件，编译运行中间文件 架构及原理剖析 架构   http请求过程
  tomcat是一个http服务器，能够接收http请求
  Tomcat Servlet容器处理流程
 1.HTTP服务器会把请求信息使用ServletRequest对象封装起来 ; 2.进一步去调用Servlet容器中某个具体Servlet; 3.在 (2)中，Servlet容器拿到请求后，根据URL和Servlet的映射关系，找到相应的Servlet ; 4.如果Servlet还没有被加载，就用反射机制创建这个Servlet，并调用Servlet的init方法来完成初始化 ; 5.接着调用这个具体Servlet的service方法来处理请求，请求处理结果使用ServletResponse对象封装 ; 6.把ServletResponse对象返回给HTTP服务器，HTTP服务器会把响应发送给客户端    总体架构，核心组件
  连接器Connector
  职责：负责对外交流: 处理Socket连接，负责网络字节流与Request和Response对象的转化;
  连接器组件 Coyote
  简介
 封装网络通信，(Socket 请求及响应处理) Catalina 容器(容器组件)与具体的请求协议及IO操作方式完全解耦 将Socket 输入转换封装为 Request 对象，进一步封装后交由Catalina 容器进行处理，处 理请求完成后, Catalina 通过Coyote 提供的Response 对象将结果写入输出流 Coyote 负责的是具体协议(应用层)和IO(传输层)相关内容    I/O模型及协议]]></description>
</item></channel>
</rss>
