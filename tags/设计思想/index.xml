<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>设计思想 - Tag - Z</title>
        <link>http://lei-zz.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</link>
        <description>设计思想 - Tag - Z</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>lei.zz0309@gmail.com (lei.zz)</managingEditor>
            <webMaster>lei.zz0309@gmail.com (lei.zz)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 23 Jul 2020 10:00:00 &#43;0000</lastBuildDate><atom:link href="http://lei-zz.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/" rel="self" type="application/rss+xml" /><item>
    <title>领域驱动模型DDD</title>
    <link>http://lei-zz.github.io/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8Bddd/</link>
    <pubDate>Thu, 23 Jul 2020 10:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://lei-zz.github.io/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8Bddd/</guid>
    <description><![CDATA[领域驱动模型DDD 定义 在开发前，通常需要进行大量的业务知识梳理，而后到达软件设计的层面，最后才是开发。而在业务知识梳理的过程中，我们必然会形成某个领域知识，根据领域知识来一步步驱动软件设计，就是领域驱动设计的基本概念。而领域驱动设计的核心就在于建立正确的领域驱动模型。
设计思想 业务逻辑不再集中在几个大型的类上，而是由大量相对小的领域对象(类)组成，这些类具备自己的状态和行为，每个类是相对完整的独立体，并与现实领域的业务对象映射。领域模型就是由这样许多的细粒度的类组成。
设计阶段  1、以一种领域专家、设计人员、开发人员都能理解的通用语言作为相互交流的工具，在交流的过程中发现领域概念，然后将这些概念设计成一个领域模型； 2、由领域模型驱动软件设计，用代码来实现该领域模型；  传统模型   对象是数据的载体，只有简单的getter/setter方法，没有行为。
  以数据为中心，以数据库ER设计作驱动
  贫血模式
 业务逻辑都是写在Service中的，WmActPoi充其量只是个数据载体，没有任何行为，是一种贫血模型 业务逻辑复杂了，业务逻辑、状态会散落到在大量方法中，原本的代码意图会渐渐不明确，我们将这种情况称为由贫血症引起的失忆症    特点
 a. 以数据库为中心 b. 贫血模型 c. 业务逻辑散落在大量的方法中 d. 当系统越来越复杂时，开发时间指数增长，维护成本很高    常见模型   DO(Data Object):此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。  DTO(Data Transfer Object):数据传输对象，Service 或 Manager 向外传输的对象。  BO(Business Object):业务对象，由 Service 层输出的封装业务逻辑的对象。  AO(ApplicationObject):应用对象，在Web层与Service层之间抽象的复用对象模型， 极为贴近展示层，复用度不高。  VO(View Object):显示层对象，通常是 Web 向模板渲染引擎层传输的对象。  Query:数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。  POJO：简单无规则java对象 纯的传统意义的java对象，最基本的Java Bean只有属性加上属性的get和set方法可以额转化为PO、DTO、VO；比如POJO在传输过程中就是DTO  PO：持久层对象 是ORM(Objevt Relational Mapping)框架中Entity，PO属性和数据库中表的字段形成一一对应关系 VO和PO，都是属性加上属性的get和set方法；表面看没什么不同，但代表的含义是完全不同的  架构解决方案 用户界面、表现层 负责向用户战羡信息以及解释用户命令]]></description>
</item></channel>
</rss>
